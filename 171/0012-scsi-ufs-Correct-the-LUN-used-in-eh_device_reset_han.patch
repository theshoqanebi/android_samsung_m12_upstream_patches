From f0d1f7d60a8107ff146113fc5017edbdf1375280 Mon Sep 17 00:00:00 2001
From: Can Guo <cang@codeaurora.org>
Date: Mon, 28 Dec 2020 04:04:36 -0800
Subject: [PATCH 12/57] scsi: ufs: Correct the LUN used in
 eh_device_reset_handler() callback

[ Upstream commit 35fc4cd34426c242ab015ef280853b7bff101f48 ]

Users can initiate resets to specific SCSI device/target/host through
IOCTL. When this happens, the SCSI cmd passed to eh_device/target/host
_reset_handler() callbacks is initialized with a request whose tag is -1.
In this case it is not right for eh_device_reset_handler() callback to
count on the LUN get from hba->lrb[-1]. Fix it by getting LUN from the SCSI
device associated with the SCSI cmd.

Link: https://lore.kernel.org/r/1609157080-26283-1-git-send-email-cang@codeaurora.org
Reviewed-by: Avri Altman <avri.altman@wdc.com>
Reviewed-by: Stanley Chu <stanley.chu@mediatek.com>
Signed-off-by: Can Guo <cang@codeaurora.org>
Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
Signed-off-by: Sasha Levin <sashal@kernel.org>
---
 drivers/scsi/ufs/ufshcd.c | 91 +++++++++++++++++++--------------------
 1 file changed, 44 insertions(+), 47 deletions(-)

diff --git a/drivers/scsi/ufs/ufshcd.c b/drivers/scsi/ufs/ufshcd.c
index 329463e91..363928a3c 100644
--- a/drivers/scsi/ufs/ufshcd.c
+++ b/drivers/scsi/ufs/ufshcd.c
@@ -6427,55 +6427,52 @@ static int ufshcd_issue_tm_cmd(struct ufs_hba *hba, int lun_id, int task_id,
  */
 static int ufshcd_eh_device_reset_handler(struct scsi_cmnd *cmd)
 {
-	struct Scsi_Host *host;
-	struct ufs_hba *hba;
-	unsigned int tag;
-	u32 pos;
-	int err;
-	u8 resp = 0xF;
-	struct ufshcd_lrb *lrbp;
-	unsigned long flags;
-
-	host = cmd->device->host;
-	hba = shost_priv(host);
-	tag = cmd->request->tag;
-
-	exynos_ufs_dump_cport_log(hba);
-
-	/* Dump debugging information to system memory */
-	ufshcd_vops_dbg_register_dump(hba);
-	exynos_ufs_show_uic_info(hba);
-
-	lrbp = &hba->lrb[tag];
-	err = ufshcd_issue_tm_cmd(hba, lrbp->lun, 0, UFS_LOGICAL_RESET, &resp);
-	if (err || resp != UPIU_TASK_MANAGEMENT_FUNC_COMPL) {
-		if (!err)
-			err = resp;
-		goto out;
-	}
-
-	/* clear the commands that were pending for corresponding LUN */
-	for_each_set_bit(pos, &hba->outstanding_reqs, hba->nutrs) {
-		if (hba->lrb[pos].lun == lrbp->lun) {
-			err = ufshcd_clear_cmd(hba, pos);
-			if (err)
-				break;
-		}
-	}
-	spin_lock_irqsave(host->host_lock, flags);
-	ufshcd_transfer_req_compl(hba, DID_RESET);
-	spin_unlock_irqrestore(host->host_lock, flags);
+        struct Scsi_Host *host;
+        struct ufs_hba *hba;
+        u32 pos;
+        int err;
+		u8 resp = 0xF, lun;
+        unsigned long flags;
+
+        host = cmd->device->host;
+        hba = shost_priv(host);
+
+        exynos_ufs_dump_cport_log(hba);
+
+        /* Dump debugging information to system memory */
+        ufshcd_vops_dbg_register_dump(hba);
+        exynos_ufs_show_uic_info(hba);
+
+	lun = ufshcd_scsi_to_upiu_lun(cmd->device->lun);
+	err = ufshcd_issue_tm_cmd(hba, lun, 0, UFS_LOGICAL_RESET, &resp);
+        if (err || resp != UPIU_TASK_MANAGEMENT_FUNC_COMPL) {
+                if (!err)
+                        err = resp;
+                goto out;
+        }
+
+        /* clear the commands that were pending for corresponding LUN */
+        for_each_set_bit(pos, &hba->outstanding_reqs, hba->nutrs) {
+                if (hba->lrb[pos].lun == lun) {
+                        err = ufshcd_clear_cmd(hba, pos);
+                        if (err)
+                                break;
+                }
+        }
+        spin_lock_irqsave(host->host_lock, flags);
+        ufshcd_transfer_req_compl(hba, DID_RESET);
+        spin_unlock_irqrestore(host->host_lock, flags);
 
 out:
-	hba->req_abort_count = 0;
-	if (!err) {
-		dev_info(hba->dev, "%s: LU reset succeeded\n", __func__);
-		err = SUCCESS;
-	} else {
-		dev_err(hba->dev, "%s: failed with err %d\n", __func__, err);
-		err = FAILED;
-	}
-	return err;
+        hba->req_abort_count = 0;
+        if (!err) {
+                dev_info(hba->dev, "%s: LU reset succeeded\n", __func__);
+                err = SUCCESS;
+        } else {
+                dev_err(hba->dev, "%s: failed with err %d\n", __func__, err);
+                err = FAILED;
+        }
+        return err;
 }
 
 static void ufshcd_set_req_abort_skip(struct ufs_hba *hba, unsigned long bitmap)
-- 
2.43.0

